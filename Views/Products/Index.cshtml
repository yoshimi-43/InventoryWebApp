@model InventoryWebApp.Models.PagedResult<InventoryWebApp.Models.Product>

@{
    ViewData["Title"] = "在庫一覧";
    var search = (string?)ViewBag.Search ?? "";
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2>在庫一覧</h2>
    <div>
        <a asp-action="Create" class="btn btn-success me-2">新規登録</a>
        <a asp-action="ExportCsv" class="btn btn-outline-secondary">CSV出力</a>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <input id="searchBox" class="form-control" placeholder="商品名で検索..." value="@search" />
    </div>
    <div class="col-md-6 text-end">
        <small class="text-muted">合計件数: @Model.TotalCount</small>
    </div>
</div>

<div id="productTable">
    @Html.Partial("_ProductTablePartial", Model)
</div>

@section Scripts {
<script>
    // Ajaxでテーブルを読み込む関数（Url.Actionを使うとルート変更に強い）
    function loadTable(page = 1) {
        const q = $("#searchBox").val() || "";
        $.get('@Url.Action("Index","Products")', { search: q, page: page })
         .done(function(html) {
             $("#productTable").html(html);
             // optional: テーブル位置にスクロールして見やすくする
             $('html, body').animate({ scrollTop: $("#productTable").offset().top - 20 }, 150);
         })
         .fail(function(xhr, status, err) {
             console.error("テーブル読み込みエラー:", status, err);
         });
    }

    // debounce 実装（lodash を使っていない場合の簡易版）
    function debounce(fn, wait) {
        let t;
        return function() {
            clearTimeout(t);
            const args = arguments;
            t = setTimeout(function() { fn.apply(null, args); }, wait);
        };
    }

    $(function () {
        // 検索ボックスの入力（Debounce付き）
        $("#searchBox").on("input", debounce(function() {
            loadTable(1);
        }, 300));

        // 重要：ページネーションクリックを「委譲」で受ける
        // 動的に生成される .paging-link でも必ずここで検知される
        $(document).on("click", "#productTable .paging-link", function (e) {
            e.preventDefault();               // ← ここでブラウザのデフォルト遷移を止める
            const page = $(this).data("page");
            if (!page) return;
            loadTable(page);
        });

        // ページロード時に最初のバインド（初回表示は非Ajaxでレンダリングされる場合がある）
        // ただし委譲を使っているので、再バインドは不要
    });
</script>
}
